body{
	font-family: 'Arial', Helvetica, sans-serif;
	background: #f4f4f4;
}

#menu, #menu ul{
	margin: 0px;
	padding: 0px;
	list-style: none;
}

#menu{
	width: 90%;
	margin: 60px auto;
	border: 1px solid #107677;
	background: #111;/*For older browsers which cannot support border gradients.*/
	background: linear-gradient(#1ebdbe, #107677);
	border-radius: 6px;
	box-shadow: 0 2px 2px #ccc;
}

/*Floating all LI left to make them appear side by side in the navigation 
menu. We could try to see if  display:inline works as well. later...*/
#menu li{
	/*What float:left does - UL and LI are block elements and will be stacked vertically.
	So, all elements under main menu will appear on the left of screen instead of under
	its parent menu item.
	*/
	float: left;
	background: url(../img/sep.png) no-repeat;
	position: relative;
}

/* The above code causes a PROBLEM. The menu background will be collapsed to a thin line &
we won't see any of the list items in the menu.
*/

/* Why does the problem occur ? 
Detailed answer in notes folder or link-http://complexspiral.com/publications/containing-floats/

Short answer -
Floated elements stack horizontally like inline elements and UNlike block elements which stack vertically. 
Also, floated elements (eg. our list items) stick out of their containing element (eg. our menu).This is 
desired and is NOT a bug in CSS.
*/

/* How to fix the problem ?
Use the micro clearfix hack/css code by Nicolas Gallagher given below.
*/

/* How does the above hack work ?
When we put floated elements in an element, the bottom of the containing element will end at the end
of the float. To make it go beyond the float, we must do two things:

Step 1- Put a BLOCK level element after the floated elements
Step 2- Ensure that the block level element appears after all floated elements.

The before & after pseudo elements let you put content before & after the existing contents (eg. 
list items in menu) of an element (e.g our menu). When we set the clear property of an element
(eg. :after of menu), then the element will start only after BOTH left & right floated elements
(eg. list items in menu).

*/

/*Step 1*/
#menu:before, #menu:after{
	content:""; /*blank content*/
	display: block; /**/
	/*I doubt if the menu:before element was needed. I saw no changes after removing it. 
	Might be needed later. Let's see.*/
}

/*Step 2*/
#menu:after{
	clear: both;
}

#menu a{
	float: left;
	padding: 12px 30px;
	color: #fff;
	text-decoration: none;
	text-transform: uppercase;
	font: bold 12px Arial, Helvetica;
}


/*This will hide the sub menus contained in each menu of the nav bar*/
#menu ul{
	margin: 20px 0 0 0;
	opacity: 0;
	visibility: hidden;
	/*Remove this line & you will see that the main menu items will be on different lines, because
	UL and LI are block elements.*/
	position: absolute;
	top: 38px;
	left: 0;
	z-index: 1;
	background:linear-gradient(#1ebdbe, #107677);
	box-shadow: 0 -1px 0 rgba(255, 255, 255, 0.3);
	border-radius: 3px;
	transition: all .2s ease-in-out;/*refer to the demo for transitions*/
}

/* This will display the sub menus under the main menu list items.

What is X > Y ? The > selects the immediate children of type Y contained in X. 
It will NOT select elements of type Y which occur inside the children.
*/
#menu li:hover > ul{
	opacity: 1;
	visibility: visible;
	margin: 0;
}

/*Code for the menus of the sub menus.*/
#menu ul ul{
	top:0;
	/*To make them open on the right side of their parent ul. In chrome developer tools > elements tab >
	right side computed tab, we see that width of parent ul is 154. To put a small gap between the child
	& parent ul, we set it to 155 instead of 150 in the tutorial.*/
	left: 155px; 
	margin: 0 0 0 20px;
	box-shadow: 0 -1px 0 rgba(255, 255, 255, 0.3);
}

/*Links in the sub menus of the items in nav menu*/
#menu ul a{
	padding: 10px;/*The effect: gap between sub menu & child menu increases.*/
	width: 130px;/*The effect: effect of above line reversed, gap decreases.*/
	display: block;
	white-space: nowrap;
	float: none; /*Is this needed ?*/
	text-transform: none; /*to control the case of text.*/
}

/*change the background of links when you hover over them.*/
#menu ul a:hover{
	background:linear-gradient(#1ebdbe, #107677);
}

/*
This code creates a triangle shaped arrow on top of any sub menu box. The arrow should point to the
parent item of the sub menu, i.e upwards. Refer notes folder on how to make triangles with css, OR
see the quick explanation here - http://codepen.io/chriscoyier/pen/lotjh

An example of what this will select the link element <a href="">Web Design</a>. After selecting it, put
a pseudo element immediately after the contents of the link element. This is what it will look like in
chrome developer tools: <a href="">Web Design::after</a> 
*/
#menu ul li:first-child > a:after{
	content: "";/*no content*/
	position: absolute;
	left: 40px;
	top: -6px;
	border-bottom: 6px solid #1ebdbe;/*Actually a rectangle which will be chopped by next 2 lines to make triangle*/
	border-left: 6px solid transparent;/*provides left side of triangle*/
	border-right: 6px solid transparent;/*provides right side of triangle*/
}

/*A left pointing arrow for sub menus of sub menus.*/
#menu ul ul li:first-child > a:after{
	left: -12px;
	top: 50%;
	margin-top: -6px;
	border-right: 6px solid #107677;/*Actually a rectangle which will be chopped by next 2 lines to make triangle*/
	border-top: 6px solid transparent;/*provides side of triangle*/
	border-bottom: 6px solid transparent;/*provides side of triangle*/
}

/*Hide when screen size is 700px or more.*/
#menu-trigger{
	display: none;
}

/*When screen width is less than 700px, apply the css below.*/
@media(max-width: 700px){
	#menu-wrap{
		position: relative;
	}
	
	#menu-wrap *{
		/*Refer the notes folder for box-sizing.*/
		box-sizing: border-box;
	}

	/*Display the menu-trigger on top of the menu. We will hide the menu in the code 
	after this code. Hmm...other than display:block, everything else is cosmetic code ???*/
	#menu-trigger{
		display: block;
		height: 40px;
		line-height: 40px;
		cursor: pointer;
		padding: 0 0 0 35px;
		border: 1px solid #107677;
		color: #fff;
		font-weight: bold;
		background-color: #111;
		background: url(../img/menu.png) no-repeat 10px center, linear-gradient(#1ebdbe, #107677);
		border-radius: 6px;
	}

	/*Hide the menu. Looks like only margin and display are doing something visible.???*/
	#menu{
		margin: 0;
		padding: 10px;
		position: absolute;
		top: 40px;
		width: 100%;
		z-index: 1;
		display: none;
		box-shadow: none;
	}

	/*A triangle arrow pointer to point to the responsive version of menu bar.*/
	#menu:after{
		content: '';
		position: absolute;
		left: 25px;
		top: -8px;
		border-bottom: 8px solid #107677;/*Actually a rectangle which will be chopped by next 2 lines to make triangle*/
		border-left: 8px solid transparent;/*provides left side of triangle*/
		border-right: 8px solid transparent;/*provides right side of triangle*/		
	}

	#menu ul{
		/*position:static - The element will flow into the page as it normally would.
		Its used only to forcefully-remove some existing positioning.*/
		position: static;
		/*undoing the menu ul settings for mobile screens. Menu ul was hidden, opacity=0.
		Resetting to show all the sub menus under main menu & their items.*/
		visibility: visible;
		opacity: 1;
		margin: 0;
		background: none;
		box-shadow: none;
	}

	/*Just cosmetic changes ?*/
	#menu ul ul{
		margin: 0 0 0 20px;
		box-shadow: none;
	}
	
	/*undoing the menu li setting for mobile screens. This should stack all the items
	vertically, but some items like project 1 etc are not. For that, we will have to 
	style the links in the menu. This is done later*/
	#menu li{
		position: static;
		display: block;
		float: none;
		border: 0;
		margin: 5px;
		box-shadow: none;
		background: none; /*Will remove the separators*/
	}

	#menu ul li{
		margin-left: 20px;
		box-shadow: none;
	}

	/*Stacks all the menu links vertically.*/
	#menu a{
		display: block;
		float: none;
		padding: 0;
		color: #fff;
	}

	#menu a:hover{
		color: #fafafa;
	}
	
	/*Makes the links compact. Now, the overall top-down menu will have a lower height.*/
	#menu ul a{
		padding: 0;
		width: auto;
	}

	#menu ul a:hover{
		background: none;
	}

	/*Remove the triangle menu pointers. Note that ul:after is different from ul :after. The former
	inserts a pseudo element, while the latter selects all the :after pseudo elements*/
	#menu ul li :after{
		display:none;
	}
}
